/**
 * Принимает игровое поле в формате строки — как в файле sudoku-puzzles.txt.
 * Возвращает игровое поле после попытки его решить.
 * Договорись со своей командой, в каком формате возвращать этот результат.
 */
 const field =[[1,-,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9],
 [1,2,3,4,5,6,7,8,9]]

sqwr = [[field[0][0],field[0][1],field[0][2],field[1][0],field[1][1],field[1][2],field[2][0],field[2][1],field[2][2]]]

const numberPool = [1,2,3,4,5,6,7,8,9]



function solve(boardString) {}

/**
 * Принимает игровое поле в том формате, в котором его вернули из функции solve.
 * Возвращает булевое значение — решено это игровое поле или нет.
 */
function isSolved(board) {
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++ ) {
      if (board[i][j] === "-") {
        return false
      }
    }
  }
  return true
}

/**
 * Принимает игровое поле в том формате, в котором его вернули из функции solve.
 * Возвращает строку с игровым полем для последующего вывода в консоль.
 * Подумай, как симпатичнее сформировать эту строку.
 */
function prettyBoard(board) {}

// Экспортировать функции для использования в другом файле (например, readAndSolve.js).
module.exports = {
  solve,
  isSolved,
  prettyBoard,
};
