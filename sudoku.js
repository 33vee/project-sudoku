/**
 * Принимает игровое поле в формате строки — как в файле sudoku-puzzles.txt.
 * Возвращает игровое поле после попытки его решить.
 * Договорись со своей командой, в каком формате возвращать этот результат.
 */
   const solve = () => {                                              //создаем перебирающую функцию
    const currPos = findEmpty(board)                                  // создаем переменную в которую передаем функцию, которая
                                                                       // ищет незаполненные ячейки таблицы


        if (currPos === null) {                                       //если пустых позиций нет то.
          return true                                                 //возвращаем true, значит текущая табл. верна. Решение найдено
        }   
        
        for (let i = 1; i < size+1; i++) {                          // пишем цикл который будет подствлять значения в пустые позиции
          const currNum = i.toString();                        //i=1 - т.к. это числа которые мы будем подставлять в пустые поз-ции
                                                                //i<size - 1 (i меньше ширины нашей таблицы (9)). создаем currNumm и перед. i в виде строки
          const validate = validate(currNum, currPos, board)            // вызываем ф-цию validate кот. принмаает подбир. число; позицию незаполненн. ячейки и саму таблицу
           
          if (isValid) {                                            // если фукция isValid возвр. true
              const [x,y] = currPos;                              // то  присваиваем значения x y = currPos(позицию пустого элемента)  
              board[x.y] = currNum;                               // изменяем таблицу подставляем  значения currNum
              
              if ( solve()) {                                     //если  
                    return true
                }
                board[x.y] = ".";
            
            }
        
        }



        return false
   }  
   solve();

console.log(solve(boardString))
 /**
 * Принимает игровое поле в том формате, в котором его вернули из функции solve.
 * Возвращает булевое значение — решено это игровое поле или нет.
 */
function isSolved(board) {

}

/**
 * Принимает игровое поле в том формате, в котором его вернули из функции solve.
 * Возвращает строку с игровым полем для последующего вывода в консоль.
 * Подумай, как симпатичнее сформировать эту строку.
 */
function prettyBoard(board) {

}

// Экспортировать функции для использования в другом файле (например, readAndSolve.js).
module.exports = {
  solve,
  isSolved,
  prettyBoard,
};
