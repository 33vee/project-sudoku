function solve(boardString) {
  let board = parseBoard(boardString);
  insertNumber(board); // –í—Å—Ç–∞–≤–ª—è–µ–º —á–∏—Å–ª–∞
  return board;
}

function parseBoard(board) {
  let reg = /.{9}/g;
  let arr = board.match(reg);
  // —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
  let newArr = arr.map((board) => board.split(""));
  return newArr;
}

function prettyBoard(board) {
  console.table(board);
}

function insertNumber(board) {
  let coordinates = findEmpty(board);
  if (!coordinates) {
    return board;
  }
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
  for (let i = 1; i <= 9; i++) {
    let target = i;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –ª–∏ —Å—Ç–æ—è—Ç—å –∑–¥–µ—Å—å num
    if (test(board, coordinates, target)) {
      let finalTarget = target;
      deployNumber(board, coordinates, target);
      insertNumber(board);
    }
  }

  // –ó–¥–µ—Å—å –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∫—É—Ä—Å–∏–∏ –Ω–µ —Å–ª–æ–º–∞–≤ –≤—ã–≤–æ–¥ üò¢
  // TODO –ú–∏—Ö–∞–∏–ª: –ú–æ—è –≤–µ—Ä—Å–∏—è - —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω–∞–¥–æ –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π
  // –í—Å—ë –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –±–ª–æ–∫ —Å–æ —Å—Ç—Ä–æ—á–∫–∏ 29 –¥–æ 34
  // –ò –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã —Ä–µ–∫—É—Ä—Å–∏—è –≤—ã—Ö–æ–¥–∏–ª–∞ –∫—É–¥–∞ –Ω–∞–¥–æ.

  // insertNumber(board)
  // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è —Ä–µ–∫—É—Ä—Å–∏—è
}

function deployNumber(board, cord, number) {
  const row = cord[0];
  const col = cord[1];
  board[row][col] = number;
}

function findEmpty(board) {
  // find '.'
  const size = 9;
  // –ù–∞–π—Ç–∏ –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
  // –ù–∞ –≤—Ö–æ–¥–µ –ø–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
  // –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è —á–µ—Ä–µ–∑ –º–∞—Å—Å–∏–≤—ã –º–∞—Å—Å–∏–≤–æ–≤
  for (let row = 0; row < size; row++) {
    //  –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –º–∞—Å—Å–∏–≤—É –≤—ã–±–∏—Ä–∞—è –º–∞—Å—Å–∏–≤—ã —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for (let column = 0; column < size; column++) {
      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä–æ–∫–µ row –∏ –Ω–∞ –æ–∑–∏—Ü–∏–∏ column
      // === '.'
      if (board[row][column] === "-") {
        return [row, column];
      }
    }
  }
  return false;
}

function isSolved(board) {} // We didn't have enough time for this one

function test(board, coordinates, target) {
  return (
    squareCheck(board, coordinates, target) &&
    crossCheck(board, coordinates, target)
  );
}
function crossCheck(array, position, num) {
  // column –ø—Ä–∞–≤–æ-–ª–µ–≤–æ
  let [row, column] = position;
  let number = array[row][column];

  for (let i = 0; i < array.length; i++) {
    let row = position[0];
    let column = position[1];

    for (let i = 0; i < array.length; i++) {
      for (let g = 0; g < array.length; g++) {
        if (+array[row][g] === num) {
          return false;
        } else if (+array[i][column] === num) {
          return false;
        }
      }
    }
    return true;
  }
}

function squareCheck(arr, pos, target) {
  let tests = { 0: /[0-2]/, 3: /[3-5]/, 6: /[6-8]/ };
  const [row, column] = pos;
  let startRow;
  let startColumn;
  let element;

  // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ –æ—Ç—Å—á—ë—Ç–∞)
  for (i in tests) {
    regex = tests[i];
    if (regex.test(row)) {
      startRow = i;
    }
    if (regex.test(column)) {
      startColumn = i;
    }
  }
  // –¢–µ—Å—Ç
  for (let i = startRow; i < startRow + 3; i++) {
    for (let j = startColumn; j < startColumn + 3; j++) {
      element = arr[i][j];
      if (element !== "-") {
        if (Number(element) === target) {
          return false;
        }
      }
    }
  }
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  // –ù–∞ –≤—Ö–æ–¥–µ –ø–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞

  return true;
}

// Exports all the functions to use them in another file.
module.exports = {
  solve: solve,
  isSolved: isSolved,
  prettyBoard: prettyBoard,
};

// TODO –ê –µ—â—ë –º—ã —É–º–µ–µ–º –≥—É–≥–ª–∏—Ç—å –∏ –Ω–∏–∂–µ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –∫–æ–¥–∞ :D
// –ß–µ–ª–µ–Ω–¥–∂ –±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å—ë —Å–∞–º–∏–º.
// –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.

// let solveSudoku = function(board) {
//   const size = 9;
//   const boxSize = 3;

//   const findEmpty = (board) => {
//       for (let r = 0; r < size; r++) {
//           for (let c = 0; c < size; c++) {
//               if(board[r][c] === '.') {
//                   return [r,c];
//               }
//           }
//       }
//       return null;
//   }

//   const validate = (num, pos, board) => {
//       const [r,c] = pos;

//       //Check rows
//       for (let i = 0; i < size; i++) {
//           if (board[i][c] === num && i !== r) {
//               return false;
//           }
//       }

//       //Check cols
//       for (let i = 0; i < size; i++) {
//           if (board[r][i] === num && i !== c) {
//               return false;
//           }
//       }

//       //Check box
//       const boxRow = Math.floor( r/boxSize ) * boxSize;
//       const boxCol = Math.floor( c/boxSize ) * boxSize;

//       for (let i = boxRow; i < boxRow + boxSize; i++) {
//           for (let j = boxCol; j < boxCol + boxSize; j++) {
//               if (board[i][j] === num && i !== r && j !== c) {
//                   return false;
//               }
//           }
//       }

//       return true;
//   }

//   const solve = () => {
//       const currPos = findEmpty(board);

//       if (currPos === null) {
//           return true;
//       }
//       //console.log('------------------------------');
//       for (let i = 1; i < size + 1; i++) {
//           const currNum = i.toString();
//           const isValid = validate(currNum, currPos, board);
//           //console.log('currPos ', currPos, 'currNum ',currNum, 'isValid ',isValid);
//           if (isValid) {
//               const [x,y] = currPos;
//               board[x][y] = currNum;

//               if(solve()) {
//                   return true;
//               }

//               board[x][y] = '.';
//           }
//       }

//       return false;
//   }

//   solve();
//   return board;
// };

// console.table(input);
// console.table(solveSudoku(input));
