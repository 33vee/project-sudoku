/**
 * Принимает игровое поле в формате строки — как в файле sudoku-puzzles.txt.
 * Возвращает игровое поле после попытки его решить.
 * Договорись со своей командой, в каком формате возвращать этот результат.
 */
 const boardr= '1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--'
function solve(sudokuStr) {

const size = 9;     // длина сектора
const boxSize = 3;  // размер сектора

  const findEmpty = (board) => {         // функция возвращает пустую позицыю в матрице
    for (let r = 0; r < size; r++) {     // проходим цыклом по строкам 
        for (let c = 0; c < size; c++) { // проходим цыклом по столбцам
            if(board[r][c] === '.') {    // проверям пустой ли елемент по заданым корденатам
                return [r,c];            // возвращае масив с местом в строке, и место в колонке
            }
        }
    }
    return null;
 } 
 findEmpty()


  
}
solve(sudokuStr)




/**
 * Принимает игровое поле в том формате, в котором его вернули из функции solve.
 * Возвращает булевое значение — решено это игровое поле или нет.
 */
function isSolved(board) {




}

/**
 * Принимает игровое поле в том формате, в котором его вернули из функции solve.
 * Возвращает строку с игровым полем для последующего вывода в консоль.
 * Подумай, как симпатичнее сформировать эту строку.
 */
function prettyBoard(board) {

}






// Экспортировать функции для использования в другом файле (например, readAndSolve.js).
module.exports = {
  solve,
  isSolved,
  prettyBoard,
};
