const { render, isSolved, prettyBoard } = require('../sudoku.js');

const strings = [
  ['1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--'],
  ['--5-3--819-285--6-6----4-5---74-283-34976---5--83--49-15--87--2-9----6---26-495-3'],
  ['29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9'],
  ['-8--2-----4-5--32--2-3-9-466---9---4---64-5-1134-5-7--36---4--24-723-6-----7--45-'],
  ['6-873----2-----46-----6482--8---57-19--618--4-31----8-86-2---39-5----1--1--4562--'],
  ['---6891--8------2915------84-3----5-2----5----9-24-8-1-847--91-5------6--6-41----'],
  ['-3-5--8-45-42---1---8--9---79-8-61-3-----54---5------78-----7-2---7-46--61-3--5--'],
  ['-96-4---11---6---45-481-39---795--43-3--8----4-5-23-18-1-63--59-59-7-83---359---7'],
  ['----754----------8-8-19----3----1-6--------34----6817-2-4---6-39------2-53-2-----'],
  ['3---------5-7-3--8----28-7-7------43-----------39-41-54--3--8--1---4----968---2--'],
  ['3-26-9--55--73----------9-----94----------1-9----57-6---85----6--------3-19-82-4-'],
  ['-2-5----48-5--------48-9-2------5-73-9-----6-25-9------3-6-18--------4-71----4-9-'],
  ['--7--8------2---6-65--79----7----3-5-83---67-2-1----8----71--38-2---5------4--2--'],
  ['----------2-65-------18--4--9----6-4-3---57-------------------73------9----------'],
  ['---------------------------------------------------------------------------------'],
];

describe('Solve function', () => {
  test('should output in the format of an array of string 1 lvl', () => {
    expect(render(strings[0].join(''))).toEqual([
      ['1', '-', '5', '8', '-', '2', '-', '-', '-'],
      ['-', '9', '-', '-', '7', '6', '4', '-', '5'],
      ['2', '-', '-', '4', '-', '-', '8', '1', '9'],
      ['-', '1', '9', '-', '-', '7', '3', '-', '6'],
      ['7', '6', '2', '-', '8', '3', '-', '9', '-'],
      ['-', '-', '-', '-', '6', '1', '-', '5', '-'],
      ['-', '-', '7', '6', '-', '-', '-', '3', '-'],
      ['4', '3', '-', '-', '2', '-', '5', '-', '1'],
      ['6', '-', '-', '3', '-', '8', '9', '-', '-'],
    ]);
  });
  test('should output in the format of an array of string 14 lvl', () => {
    expect(render(strings[13].join(''))).toEqual([
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '2', '-', '6', '5', '-', '-', '-', '-'],
      ['-', '-', '-', '1', '8', '-', '-', '4', '-'],
      ['-', '9', '-', '-', '-', '-', '6', '-', '4'],
      ['-', '3', '-', '-', '-', '5', '7', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '7'],
      ['3', '-', '-', '-', '-', '-', '-', '9', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ]);
  });
  test('should output in the format of an array of string 15 lvl', () => {
    expect(render(strings[14].join(''))).toEqual([
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ]);
  });
});

describe('isSolved function', () => {
  test('must fill in correctly 1 lvl', () => {
    expect(isSolved([
      ['1', '-', '5', '8', '-', '2', '-', '-', '-'],
      ['-', '9', '-', '-', '7', '6', '4', '-', '5'],
      ['2', '-', '-', '4', '-', '-', '8', '1', '9'],
      ['-', '1', '9', '-', '-', '7', '3', '-', '6'],
      ['7', '6', '2', '-', '8', '3', '-', '9', '-'],
      ['-', '-', '-', '-', '6', '1', '-', '5', '-'],
      ['-', '-', '7', '6', '-', '-', '-', '3', '-'],
      ['4', '3', '-', '-', '2', '-', '5', '-', '1'],
      ['6', '-', '-', '3', '-', '8', '9', '-', '-'],
    ])).toEqual([
      ['1', '4', '5', '8', '9', '2', '6', '7', '3'],
      ['8', '9', '3', '1', '7', '6', '4', '2', '5'],
      ['2', '7', '6', '4', '3', '5', '8', '1', '9'],
      ['5', '1', '9', '2', '4', '7', '3', '8', '6'],
      ['7', '6', '2', '5', '8', '3', '1', '9', '4'],
      ['3', '8', '4', '9', '6', '1', '7', '5', '2'],
      ['9', '5', '7', '6', '1', '4', '2', '3', '8'],
      ['4', '3', '8', '7', '2', '9', '5', '6', '1'],
      ['6', '2', '1', '3', '5', '8', '9', '4', '7'],
    ]);
  });
  test('must fill in correctly 14 lvl', () => {
    expect(isSolved([
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '2', '-', '6', '5', '-', '-', '-', '-'],
      ['-', '-', '-', '1', '8', '-', '-', '4', '-'],
      ['-', '9', '-', '-', '-', '-', '6', '-', '4'],
      ['-', '3', '-', '-', '-', '5', '7', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '7'],
      ['3', '-', '-', '-', '-', '-', '-', '9', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ])).toEqual([
      ['1', '4', '3', '2', '7', '9', '5', '6', '8'],
      ['8', '2', '9', '6', '5', '4', '1', '7', '3'],
      ['5', '6', '7', '1', '8', '3', '2', '4', '9'],
      ['2', '9', '1', '7', '3', '8', '6', '5', '4'],
      ['4', '3', '6', '9', '1', '5', '7', '8', '2'],
      ['7', '5', '8', '4', '2', '6', '9', '3', '1'],
      ['6', '8', '4', '5', '9', '1', '3', '2', '7'],
      ['3', '1', '2', '8', '6', '7', '4', '9', '5'],
      ['9', '7', '5', '3', '4', '2', '8', '1', '6'],
    ]);
  });
  test('must fill in correctly 15 lvl', () => {
    expect(isSolved([
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
      ['-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ])).toEqual([
      ['1', '2', '3', '4', '5', '6', '7', '8', '9'],
      ['4', '5', '6', '7', '8', '9', '1', '2', '3'],
      ['7', '8', '9', '1', '2', '3', '4', '5', '6'],
      ['2', '1', '4', '3', '6', '5', '8', '9', '7'],
      ['3', '6', '5', '8', '9', '7', '2', '1', '4'],
      ['8', '9', '7', '2', '1', '4', '3', '6', '5'],
      ['5', '3', '1', '6', '4', '2', '9', '7', '8'],
      ['6', '4', '2', '9', '7', '8', '5', '3', '1'],
      ['9', '7', '8', '5', '3', '1', '6', '4', '2'],
    ]);
  });
});

describe('prettyBoard function', () => {
  test('well formatted for output to the screen 1 lvl', () => {
    expect(prettyBoard([
      ['1', '4', '5', '8', '9', '2', '6', '7', '3'],
      ['8', '9', '3', '1', '7', '6', '4', '2', '5'],
      ['2', '7', '6', '4', '3', '5', '8', '1', '9'],
      ['5', '1', '9', '2', '4', '7', '3', '8', '6'],
      ['7', '6', '2', '5', '8', '3', '1', '9', '4'],
      ['3', '8', '4', '9', '6', '1', '7', '5', '2'],
      ['9', '5', '7', '6', '1', '4', '2', '3', '8'],
      ['4', '3', '8', '7', '2', '9', '5', '6', '1'],
      ['6', '2', '1', '3', '5', '8', '9', '4', '7'],
    ])).toEqual('1,4,5,8,9,2,6,7,3\n8,9,3,1,7,6,4,2,5\n2,7,6,4,3,5,8,1,9\n5,1,9,2,4,7,3,8,6\n7,6,2,5,8,3,1,9,4\n3,8,4,9,6,1,7,5,2\n9,5,7,6,1,4,2,3,8\n4,3,8,7,2,9,5,6,1\n6,2,1,3,5,8,9,4,7');
  });
  test('well formatted for output to the screen 14 lvl', () => {
    expect(prettyBoard([
      ['1', '4', '3', '2', '7', '9', '5', '6', '8'],
      ['8', '2', '9', '6', '5', '4', '1', '7', '3'],
      ['5', '6', '7', '1', '8', '3', '2', '4', '9'],
      ['2', '9', '1', '7', '3', '8', '6', '5', '4'],
      ['4', '3', '6', '9', '1', '5', '7', '8', '2'],
      ['7', '5', '8', '4', '2', '6', '9', '3', '1'],
      ['6', '8', '4', '5', '9', '1', '3', '2', '7'],
      ['3', '1', '2', '8', '6', '7', '4', '9', '5'],
      ['9', '7', '5', '3', '4', '2', '8', '1', '6'],
    ])).toEqual('1,4,3,2,7,9,5,6,8\n8,2,9,6,5,4,1,7,3\n5,6,7,1,8,3,2,4,9\n2,9,1,7,3,8,6,5,4\n4,3,6,9,1,5,7,8,2\n7,5,8,4,2,6,9,3,1\n6,8,4,5,9,1,3,2,7\n3,1,2,8,6,7,4,9,5\n9,7,5,3,4,2,8,1,6');
  });
  test('well formatted for output to the screen 15 lvl', () => {
    expect(prettyBoard([
      ['1', '2', '3', '4', '5', '6', '7', '8', '9'],
      ['4', '5', '6', '7', '8', '9', '1', '2', '3'],
      ['7', '8', '9', '1', '2', '3', '4', '5', '6'],
      ['2', '1', '4', '3', '6', '5', '8', '9', '7'],
      ['3', '6', '5', '8', '9', '7', '2', '1', '4'],
      ['8', '9', '7', '2', '1', '4', '3', '6', '5'],
      ['5', '3', '1', '6', '4', '2', '9', '7', '8'],
      ['6', '4', '2', '9', '7', '8', '5', '3', '1'],
      ['9', '7', '8', '5', '3', '1', '6', '4', '2'],
    ])).toEqual('1,2,3,4,5,6,7,8,9\n4,5,6,7,8,9,1,2,3\n7,8,9,1,2,3,4,5,6\n2,1,4,3,6,5,8,9,7\n3,6,5,8,9,7,2,1,4\n8,9,7,2,1,4,3,6,5\n5,3,1,6,4,2,9,7,8\n6,4,2,9,7,8,5,3,1\n9,7,8,5,3,1,6,4,2');
  });
});
