const {
   solve,
   isSolved,
   prettyBoard,
   createBordLines,
   getPossibleValues
 } = require('../sudoku.js')

describe('Тесты функции Sudoku', () => {
   let str;
 
   beforeAll(() => {
     str = "29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9";
   });
 
   describe('Общие тесты createBordLines', () => {
     test('Возвращает ли функция новый массив?', () => {
       expect(Array.isArray(createBordLines(str))).toBe(true);
     });
     test('Приходит ли в функцию строка?', () => {
       expect(typeof str).toEqual('string');
     });
     test('Возвращает ли ожидаемый ответ?', () => {
      str = "1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--";
      expect(createBordLines(str)).toEqual([
            [
            '1', '-', '5',
            '8', '-', '2',
            '-', '-', '-'
            ],
            [
            '-', '9', '-',
            '-', '7', '6',
            '4', '-', '5'
            ],
            [
            '2', '-', '-',
            '4', '-', '-',
            '8', '1', '9'
            ],
            [
            '-', '1', '9',
            '-', '-', '7',
            '3', '-', '6'
            ],
            [
            '7', '6', '2',
            '-', '8', '3',
            '-', '9', '-'
            ],
            [
            '-', '-', '-',
            '-', '6', '1',
            '-', '5', '-'
            ],
            [
            '-', '-', '7',
            '6', '-', '-',
            '-', '3', '-'
            ],
            [
            '4', '3', '-',
            '-', '2', '-',
            '5', '-', '1'
            ],
            [
            '6', '-', '-',
            '3', '-', '8',
            '9', '-', '-'
            ]
         ]);
    });
   });



   describe('Общие тесты getPossibleValues', () => {
     let array;
     let coordinates;
      beforeEach(() => {
       array = [
         [
         '1', '-', '5',
         '8', '-', '2',
         '-', '-', '-'
         ],
         [
         '-', '9', '-',
         '-', '7', '6',
         '4', '-', '5'
         ],
         [
         '2', '-', '-',
         '4', '-', '-',
         '8', '1', '9'
         ],
         [
         '-', '1', '9',
         '-', '-', '7',
         '3', '-', '6'
         ],
         [
         '7', '6', '2',
         '-', '8', '3',
         '-', '9', '-'
         ],
         [
         '-', '-', '-',
         '-', '6', '1',
         '-', '5', '-'
         ],
         [
         '-', '-', '7',
         '6', '-', '-',
         '-', '3', '-'
         ],
         [
         '4', '3', '-',
         '-', '2', '-',
         '5', '-', '1'
         ],
         [
         '6', '-', '-',
         '3', '-', '8',
         '9', '-', '-'
         ]
      ];
      coordinates = [0, 1];
     });
 

     test('Возвращает ли функция не пустой массив?', () => {
       expect(getPossibleValues(coordinates, array).length).toBeGreaterThan(0);
     });
     test('Сответствует ли результат ожидаемому?', () => {
       expect(getPossibleValues(coordinates, array)).toEqual(['4', '7']);
     });
   });

   describe('Общие тесты isSolved', () => {
      let arr;
       beforeEach(() => {
         arr = [
            [
              '2', '9', '3',
              '5', '4', '1',
              '6', '8', '7'
            ],
            [
              '7', '1', '8',
              '2', '9', '6',
              '4', '5', '3'
            ],
            [
              '6', '5', '4',
              '7', '3', '8',
              '9', '1', '2'
            ],
            [
              '9', '7', '2',
              '8', '1', '3',
              '5', '6', '4'
            ],
            [
              '8', '4', '6',
              '9', '5', '2',
              '3', '7', '1'
            ],
            [
              '5', '3', '1',
              '4', '6', '7',
              '2', '9', '8'
            ],
            [
              '3', '6', '9',
              '1', '7', '4',
              '8', '2', '5'
            ],
            [
              '1', '2', '5',
              '3', '8', '9',
              '7', '4', '6'
            ],
            [
              '4', '8', '7',
              '6', '2', '5',
              '1', '3', '9'
            ]
          ]
       });

      test('Принимает ли функция массив?', () => {
        expect(Array.isArray(arr)).toBe(true);
      });

      test('Возвращает ли функция ожидаемый результат?', () => {
        expect(isSolved(arr)).toEqual(true);
      });

      test('Возвращает ли функция ожидаемый результат?', () => {
            arr = [
               [
                 '2', '9', '3',
                 '0', '4', '1',
                 '6', '8', '7'
               ],
               [
                 '7', '1', '8',
                 '2', '9', '6',
                 '4', '5', '3'
               ],
               [
                 '6', '5', '4',
                 '7', '3', '8',
                 '9', '1', '2'
               ],
               [
                 '9', '7', '2',
                 '8', '1', '3',
                 '5', '6', '4'
               ],
               [
                 '8', '4', '6',
                 '9', '5', '2',
                 '3', '7', '1'
               ],
               [
                 '5', '3', '1',
                 '4', '6', '7',
                 '2', '9', '8'
               ],
               [
                 '3', '6', '9',
                 '1', '7', '4',
                 '8', '2', '5'
               ],
               [
                 '1', '2', '5',
                 '3', '8', '9',
                 '7', '4', '6'
               ],
               [
                 '4', '8', '7',
                 '6', '2', '5',
                 '1', '3', '9'
               ]
             ]
            expect(isSolved(arr)).toEqual(false);
      });

      

    });

    describe('Общие тесты prettyBoard', () => {
      let arr;
      beforeEach (() => {
      arr = [
         [
           '2', '9', '3',
           '5', '4', '1',
           '6', '8', '7'
         ],
         [
           '7', '1', '8',
           '2', '9', '6',
           '4', '5', '3'
         ],
         [
           '6', '5', '4',
           '7', '3', '8',
           '9', '1', '2'
         ],
         [
           '9', '7', '2',
           '8', '1', '3',
           '5', '6', '4'
         ],
         [
           '8', '4', '6',
           '9', '5', '2',
           '3', '7', '1'
         ],
         [
           '5', '3', '1',
           '4', '6', '7',
           '2', '9', '8'
         ],
         [
           '3', '6', '9',
           '1', '7', '4',
           '8', '2', '5'
         ],
         [
           '1', '2', '5',
           '3', '8', '9',
           '7', '4', '6'
         ],
         [
           '4', '8', '7',
           '6', '2', '5',
           '1', '3', '9'
         ]
       ];

      });
      test('Принимает ли функция массив?', () => {
        expect(Array.isArray(arr)).toBe(true);
      });
      test('Возвращает ли функция строку?', () => {
        expect(typeof prettyBoard(arr)).toEqual("string");
      });
    });
      
    describe('Общие тесты Solve', () => {
      
   

      test('Выводит ожидаемый результат?', () => {
         str = '6-873----2-----46-----6482--8---57-19--618--4-31----8-86-2---39-5----1--1--4562--'
         expect(solve(str)).toEqual([
            [
              '6', '4', '8',
              '7', '3', '2',
              '9', '1', '5'
            ],
            [
              '2', '7', '5',
              '1', '8', '9',
              '4', '6', '3'
            ],
            [
              '3', '1', '9',
              '5', '6', '4',
              '8', '2', '7'
            ],
            [
              '4', '8', '6',
              '3', '2', '5',
              '7', '9', '1'
            ],
            [
              '9', '2', '7',
              '6', '1', '8',
              '3', '5', '4'
            ],
            [
              '5', '3', '1',
              '9', '4', '7',
              '6', '8', '2'
            ],
            [
              '8', '6', '4',
              '2', '7', '1',
              '5', '3', '9'
            ],
            [
              '7', '5', '2',
              '8', '9', '3',
              '1', '4', '6'
            ],
            [
              '1', '9', '3',
              '4', '5', '6',
              '2', '7', '8'
            ]
          ]
          
          );
       });

    });

 });
 
 
