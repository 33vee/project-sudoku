describe('solve() function', function () {
  it('should solve 1-5 levels', function () {
    let array = arraytoString(
      '-96-4---11---6---45-481-39---795--43-3--8----4-5-23-18-1-63--59-59-7-83---359---7'
    );
    expect(solve(array)).toEqual([
      ['3', '9', '6', '2', '4', '5', '7', '8', '1'],
      ['1', '7', '8', '3', '6', '9', '5', '2', '4'],
      ['5', '2', '4', '8', '1', '7', '3', '9', '6'],
      ['2', '8', '7', '9', '5', '1', '6', '4', '3'],
      ['9', '3', '1', '4', '8', '6', '2', '7', '5'],
      ['4', '6', '5', '7', '2', '3', '9', '1', '8'],
      ['7', '1', '2', '6', '3', '8', '4', '5', '9'],
      ['6', '5', '9', '1', '7', '4', '8', '3', '2'],
      ['8', '4', '3', '5', '9', '2', '1', '6', '7'],
    ]);
    let array2 = arraytoString(
      '29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9'
    );
    expect(solve(array2)).toEqual([
      ['2', '9', '3', '5', '4', '1', '6', '8', '7'],
      ['7', '1', '8', '2', '9', '6', '4', '5', '3'],
      ['6', '5', '4', '7', '3', '8', '9', '1', '2'],
      ['9', '7', '2', '8', '1', '3', '5', '6', '4'],
      ['8', '4', '6', '9', '5', '2', '3', '7', '1'],
      ['5', '3', '1', '4', '6', '7', '2', '9', '8'],
      ['3', '6', '9', '1', '7', '4', '8', '2', '5'],
      ['1', '2', '5', '3', '8', '9', '7', '4', '6'],
      ['4', '8', '7', '6', '2', '5', '1', '3', '9'],
    ]);
  });

  it('should solve 6-10 levels', function () {
    let array = arraytoString(
      '3---------5-7-3--8----28-7-7------43-----------39-41-54--3--8--1---4----968---2--'
    );
    expect(solve(array)).toEqual([
      ['3', '8', '7', '4', '1', '9', '5', '2', '6'],
      ['2', '5', '9', '7', '6', '3', '4', '1', '8'],
      ['6', '4', '1', '5', '2', '8', '3', '7', '9'],
      ['7', '1', '6', '2', '8', '5', '9', '4', '3'],
      ['5', '9', '4', '6', '3', '1', '7', '8', '2'],
      ['8', '2', '3', '9', '7', '4', '1', '6', '5'],
      ['4', '7', '2', '3', '9', '6', '8', '5', '1'],
      ['1', '3', '5', '8', '4', '2', '6', '9', '7'],
      ['9', '6', '8', '1', '5', '7', '2', '3', '4'],
    ]);

    let array2 = arraytoString(
      '----754----------8-8-19----3----1-6--------34----6817-2-4---6-39------2-53-2-----'
    );
    expect(solve(array2)).toEqual([
      ['6', '9', '3', '8', '7', '5', '4', '1', '2'],
      ['1', '4', '5', '6', '3', '2', '7', '9', '8'],
      ['7', '8', '2', '1', '9', '4', '3', '5', '6'],
      ['3', '5', '7', '4', '2', '1', '8', '6', '9'],
      ['8', '1', '6', '9', '5', '7', '2', '3', '4'],
      ['4', '2', '9', '3', '6', '8', '1', '7', '5'],
      ['2', '7', '4', '5', '1', '9', '6', '8', '3'],
      ['9', '6', '8', '7', '4', '3', '5', '2', '1'],
      ['5', '3', '1', '2', '8', '6', '9', '4', '7'],
    ]);
  });

  it('should solve 11-15 levels', function () {
    let array = arraytoString(
      '----------2-65-------18--4--9----6-4-3---57-------------------73------9----------'
    );
    expect(solve(array)).toEqual([
      ['1', '4', '3', '2', '7', '9', '5', '6', '8'],
      ['8', '2', '9', '6', '5', '4', '1', '7', '3'],
      ['5', '6', '7', '1', '8', '3', '2', '4', '9'],
      ['2', '9', '1', '7', '3', '8', '6', '5', '4'],
      ['4', '3', '6', '9', '1', '5', '7', '8', '2'],
      ['7', '5', '8', '4', '2', '6', '9', '3', '1'],
      ['6', '8', '4', '5', '9', '1', '3', '2', '7'],
      ['3', '1', '2', '8', '6', '7', '4', '9', '5'],
      ['9', '7', '5', '3', '4', '2', '8', '1', '6'],
    ]);
    let array2 = arraytoString(
      '---------------------------------------------------------------------------------'
    );
    expect(solve(array2)).toEqual([
      ['1', '2', '3', '4', '5', '6', '7', '8', '9'],
      ['4', '5', '6', '7', '8', '9', '1', '2', '3'],
      ['7', '8', '9', '1', '2', '3', '4', '5', '6'],
      ['2', '1', '4', '3', '6', '5', '8', '9', '7'],
      ['3', '6', '5', '8', '9', '7', '2', '1', '4'],
      ['8', '9', '7', '2', '1', '4', '3', '6', '5'],
      ['5', '3', '1', '6', '4', '2', '9', '7', '8'],
      ['6', '4', '2', '9', '7', '8', '5', '3', '1'],
      ['9', '7', '8', '5', '3', '1', '6', '4', '2'],
    ]);
  });
});


