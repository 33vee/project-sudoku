// –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ sudoku.js.
const sudoku = require('./sudoku');
const cfonts = require('cfonts');

function readAndSolve(error, fileData) {
  // –ï—Å–ª–∏ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏
  // –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏.
  if (error) {
    throw error;
  }

  // –†–∞–∑–±–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
  const puzzles = fileData
    .split('\n')
    .filter((line) => line !== '');

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å—É–¥–æ–∫—É –∏–∑ process.argv, –ª–∏–±–æ –≤–∑—è—Ç—å 1-–π —Å—É–¥–æ–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
  let puzzleNumber = Number(process.argv[2]) || 1;
 

  // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å—É–¥–æ–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –º–∞—Å—Å–∏–≤–∞ —Å –ø–∞–∑–∑–ª–∞–º–∏.
  if (puzzleNumber > puzzles.length) {
    puzzleNumber = puzzles.length;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–π —Å—É–¥–æ–∫—É –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
  const puzzle = puzzles[puzzleNumber - 1];
  myFonts(`Let's solve sudoku ‚Ññ${puzzleNumber}:`);
  let arr = puzzle.split('')
  const puzzleTable = [];
  for (let i = 0; i < arr.length; i += 9) {
    puzzleTable.push(arr.slice(i, i + 9));
  }

  console.table(puzzleTable.map(el => el.map((el) => el === '-' ? el = 'üòø' : Number(el))));


  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é solve –∏–∑ —Ñ–∞–π–ª–∞ sudoku.js –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–æ–∫—É.
  const solvedPuzzle = sudoku.mainFunction(puzzle);

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é isSolved –∏–∑ —Ñ–∞–π–ª–∞ sudoku.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–æ–∫—É.
  if (!sudoku.isSolved(solvedPuzzle)) {
    console.log(`–ù–µ —Å–º–æ–≥–ª–∏ —Ä–µ—à–∏—Ç—å —Å—É–¥–æ–∫—É ‚Ññ${puzzleNumber} :(`, '\n');
    return; // –ï—Å–ª–∏ —Å—É–¥–æ–∫—É –Ω–µ —Ä–µ—à—ë–Ω, –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
  }

  // –ö–æ–¥ –Ω–∏–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è —Å—É–¥–æ–∫—É –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
  myFonts(`Sudoku ${puzzleNumber} complete`);

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é prettyBoard –∏–∑ —Ñ–∞–π–ª–∞ sudoku.js –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  // –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –≤ —Å—Ç—Ä–æ–∫—É –≤ –∂–µ–ª–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
  sudoku.prettyBoard(solvedPuzzle);
}
function myFonts(str) {
  return cfonts.say(`${str}`, {
   
  font: 'chrome', // define the font face
  align: 'left', // define text alignment
  colors: ['yellow'], // define all colors
  background: 'transparent', // define the background color, you can also use `backgroundColor` here as key
  letterSpacing: 1, // define letter spacing
  lineHeight: 1, // define the line height
  space: true, // define if the output text should have empty lines on top and on the bottom
  maxLength: '0', // define how many character can be on one line
  gradient: ['green', 'yellow'], // define your two gradient colors
  independentGradient: false, // define if you want to recalculate the gradient for each new line
  transitionGradient: false, // define if this is a transition between colors directly
  env: 'node', // define the environment cfonts is being executed in
  });
  } 

module.exports = readAndSolve;
