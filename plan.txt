// Takes a board as a string in the format
// you see in the puzzle file. Returns
// something representing a board after
// your solver has tried to solve it.
// How you represent your board is up to you!
function solve(boardString) {
  1. проверка по строке
  2. проверка по столбцу
  3. проверка по квадрату
  4. сам движок
  let array = [];
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      array[i][j] = boardString[i * 9 + j];
    }
  }
}

// Returns a boolean indicating whether
// or not the provided board is solved.
// The input board will be in whatever
// form `solve` returns.
function isSolved(board) {}
эта функция должна быть интегрирована в solve

// Takes in a board in some form and
// returns a String that's well formatted
// for output to the screen.
// The input board will be in whatever
// form `solve` returns.
function prettyBoard(board) {}
из строки делает массив 
эта функция должна быть интегрирована в solve

// Exports all the functions to use them in another file.
module.exports = {
  solve: solve,
  isSolved: isSolved,
  prettyBoard: prettyBoard,
};

1. строка -> prettyBoard(board) -> массив - из строки делает массив, состоящий из чисел и пустых строк - Мария 
[
  [1, 2, '', 367', 5, 4, '', 8, 9]
  [1, 2, '', 5, 4, '', 8, 9]
  [1, 2, '', 5, 4, '', 8, 9]
  [1, 2, '', 5, 4, '', 8, 9]
  [1, 2, '', 5, 4, '', 8, 9]
  [1, 2, '', 5, 4, '', 8, 9]
  [1, 2, '', 5, 4, '', 8, 9]
]
2. массив с судоку-> isSolved(board) -> true/false - проверяет, решен ли весь судоку - Мария
3. массив с судоку-> solveRow -> массив - проверка по строке (собирает имеющиеся символы в строке) (isNaN(array[i][j])) - Макс
4.  массив с судоку-> solveColumn-> массив - проверка по столбцу (собирает имеющиеся символы в столбце) - Макс
5. ***solveBox - проверка по ячейке
6. solveEngine - движок, объединяющий все это счастье - Софья
  (базовый случай - isSolved returns true
  рекурсивный случай - isSolved returns false
  )

  while (isSolved === false) {
    solve(array);
  }

  prettyBoard()
  return 
